
/***********************************************
/ E-WHILE Transpiler: bitwise and
/ {{0}} = {{1}} & {{2}} 

{{0}} = {{g}} + 0;
{{3}} = {{g}} + 0;      
{{4}} = {{g}} + 1  

while {{3}} > 0 do         
    {{5}} = {{1}} + 0;       
    {{6}} = {{3}} + 0;       
    while {{6}} > 0 do
        {{7}} = {{5}} + 0;
        {{8}} = {{g}} + 0;
        {{9}} = {{7}} - 1;
        while {{9}} > 0 do
            {{7}} = {{7}} - 2;
            {{8}} = {{8}} + 1;
            {{9}} = {{7}} - 1;
        end;
        {{5}} = {{8}} + 0;
        {{6}} = {{6}} - 1
    end;

    {{5}} = {{5}} - 1;
    while {{5}} > 0 do
        {{5}} = {{5}} - 2
    end;

    {{6}} = {{2}} + 0;
    {{10}} = {{3}} + 0;
    while {{10}} > 0 do
        {{7}} = {{6}} + 0;   
        {{8}} = {{g}} + 0; 
        {{9}} = {{7}} - 1;
        while {{9}} > 0 do
            {{7}} = {{7}} - 2;
            {{8}} = {{8}} + 1;
            {{9}} = {{7}} - 1
        end;
        {{6}} = {{8}} + 0;
        {{10}} = {{10}} - 1
    end;

    {{6}} = {{6}} - 1;
    while {{6}} > 0 do
        {{6}} = {{6}} - 2
    end;

    {{7}} = {{6}} + 0;
    while {{5}} > 0 do
        {{7}} = {{7}} + 1;
        {{5}} = {{5}} - 1
    end;
    
    {{7}} = {{7}} - 1;  
    while {{7}} > 0 do
        {{0}} = {{0}} +{{4}} / set bit in result
        {{7}} = {{7}} - {{7}} / clear temp
    end

    / --- i++ ---
    {{3}} = {{3}} + 1

    / --- power <<= 1 ---
    {{4}} = {{4}} + {{4}}     / power *= 2

end
/***********************************************
